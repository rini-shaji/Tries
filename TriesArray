import java.util.*;

public class Solution {
    public static int numChldCount=0;
    public static void main(String[] args) {
       Trie t= new Trie();
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        for(int a0 = 0; a0 < n; a0++){
            String op = in.next();
            String contact = in.next();
            if(op.equals("add")){
                t.insert(contact);
            }
            if (op.equals("find")){
                numChldCount=0;
                t.startsWith(contact);
            }
        }
    }
    public static class TrieNode{
        TrieNode[] arr;
        boolean isEnd;
        public TrieNode(){
           this.arr = new TrieNode[26];
        }
    }
    
    public static class Trie{
        private TrieNode root;
        public Trie(){
            root = new TrieNode();
        }
        
        public void insert (String contact){
            TrieNode p =root;
            char c;
            int index;
            for (int i=0; i< contact.length(); i++){
                c = contact.charAt(i);
                index =c-'a';
                if (p.arr[index]==null){
                    TrieNode temp=new TrieNode();
                    p.arr[index]=temp;
                    p=temp;
                }else{
                    p=p.arr[index];
                }
            }
            p.isEnd=true;
        }
        
        public void startsWith(String partial){
            TrieNode p = searchNode(partial);
            if (p!=null){               
                countChld(p);
            }            
         System.out.println(numChldCount);
        }
        
        public void countChld(TrieNode current){
            if(current.isEnd){
            numChldCount+=1;
            }
            for(int i=0;i<26;i++){
                if (current.arr[i]!=null){
                    countChld(current.arr[i]);
                }
            }
        }
        public TrieNode searchNode(String partial){
            TrieNode p =root;
            char c;
            int index;
            for (int i=0;i<partial.length();i++){
                c=partial.charAt(i);
                index=c-'a';
                if(p.arr[index]!=null){
                    p=p.arr[index];
                }else{
                    return null;
                }
            }
            if (p==root){
                return null;
            }
            return p;
        }
    }
    
}
